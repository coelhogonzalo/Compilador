__1.Declaracion de una variable de cada tipo

__Sin error
uslinteger _varuslinteger,
single _varsingle,

__Con error
__usinteger _varuslinteger,
__uslinteger _,
__uslinteger, _varuslinteger,
__single _id



__2.Declaracion de una lista de variables

__Sin error
uslinteger _var1;_var2;_var3,
single _single1;_single2;_single3,

__Con error (REDECLARACION DE VARIABLES)
__uslinteger _var4;_var2;_var4,
__single _var2;_single4;_single5,
__uslinteger _var1._var2;_var3,
__single _var1._var2;_var3,
__single _var1._var2;_var3



__3.Sentencia de salida de mensajes por pantalla

__Sin error
print ( 'cadena probando' ),
print ( _var1 ),
print ( 'esta cadena es de -
mas de un ren-
glon' ),

__Con error
__print ( 'esto esta mal )',
__print ( esto tambi'en' ),
__print ( ' y esto tambien ),
__print ('cadenita')


__4.Sentencia IF sin bloque ELSE con una sola sentencia.

__Sin error
if (0.2=0.3) 
	print ( ' probando ' ),
endif

__Con error
__if ( 0.2 < 0.3 )
__endif

__if (0.2 < 0.4
__	print ( ' probando ' ),
__endif

__if 0.2 < 0.4)
__	print ( ' probando ' ),
__endif



__5.Sentencia IF sin bloque ELSE con un bloque de sentencias

__Sin error
if ( _var1 = _var2 ){
	print ( ' probando' ),
	print ( ' probando parte dos' ),
}
endif

__Con error
__if ( 0.2 < 0.3 ){
__	print ( ' dale que funcionas' ),
__	print ( ' dale que funcionas parte dos: la venganza del print' ),
__endif

__if ( 0.2 < 0.3 ){
__	print ( ' dale que funcionas' )
__	print ( ' dale que funcionas parte dos la venganza del print' )
__endif

__6.Sentencia IF con bloque ELSE

__Sin error
if ( 0.2 < 0.3 ) 
	print ( ' dale que funcionas' ),
else
	print ( ' probando ' ),
endif

__Con error
__if ( 0.2 < 0.3 )
__else
__endif,

__if ( 0.2 < 0.3 )
__	print ( ' probando ' ),
__else
__endif

__if ( 0.2 < 0.3 )
__else
__	print ( ' probando ' ),
__endif



__7.Sentencia IF con comparacion entre expresiones aritmeticas como condicion, con bloque ELSE

__Sin error
if ( 0.2+5.2 < 0.3-3.2 ) 
	print ( ' dale que funcionas' ),
else
	print ( ' probando ' ),
endif

__Con error
__if ( 0.2+5.2 < 0.3-3.2 )
__else
__endif

__if ()
__	print ( ' dale que funcionas' ),
__else
__	print ( ' probando' ),
__endif



__8.Sentencia de control asignada como tema particular

__Sin error
while ( 0.2+5.2 < 0.3-3.2 )
	print ( ' dale que funcionas' ),

__Con error
__while ( 0.2+5.2 < 0.3-3.2 
__	print ( ' dale que funcionas' ),
	
__while 0.2+5.2 < 0.3-3.2 )
__	print ( ' dale que funcionas' ),
	
__while()
__	print ( ' dale que funcionas' ),

__9.Sentencia de control asignada con IF anidado

__Sin error
while ( 0.2+5.2 < 0.3-3.2 )
	if ( 0.2+5.2 < 0.3-3.2 )
		print ( ' dale que funcionas ' ),
	endif

__Con error
__while ( 0.2+5.2 < 0.3-3.2 
__	if ( 0.2+5.2 < 0.3-3.2 
__		print ( ' dale que funcionas ' ),
__	endif



__14. Declaraciï¿½n de funciones con lista de permisos (si corresponde) con sentencias de control dentro.

__Sin error
single _diversion,
single _funWRITE ( single _param1) {
	if(0.2 < 0.3)
		print ( ' dale que funcionas' ),
	endif
	_param1 := 0.2,
	return ( 2.0 )
}
single _funWRITEPASS ( single _param2) {
	if(0.2 < 0.3)
		print ( ' dale que funcionas' ),
	endif
	_param2 := _funWRITE(_param2; write ),
	return ( 2.0 )
}

__Con error UTILIZACION DE VARIABLE LOCAL A FUNCION FUERA DE SU AMBITO
__single _testAmbito ( single _paramTest) {
__	single _declaradaenfuncion,
__	print ( ' dale que funcionas' ),
__	return ( 2.0 )
__}
__declaradaenfuncion := 0.2,
__single _fun2 ( write; single _diversion; uslinteger _id) {
__	print ( ' dale que funcionas' ),
__	if(0.2 == 0.3)
__		print ( ' dale que funcionas' ),
__	endif
__	return ( 2.0 
__}


__15. Llamado de funciones como sentencia ejecutable.

__Sin error
_var1 := _funWRITE (_diversion; write ),

__Con error
__var1 := _funWRITE (_diversion; readonly ),__invalido
__var1 := _funWRITE (_diversion; pass ),__invalido
__var1 := _funWRITE (_diversion; write ),__Valido
__var1 := _funWRITE (_diversion; write;pass ),__Valido
__var1 := _funWRITEPASS (_diversion; readonly ),__invalido
__var1 := _funWRITEPASS (_diversion; pass ),__invalido
__var1 := _funWRITEPASS (_diversion; write ),__invalido
__var1 := _funWRITEPASS (_diversion; write;pass ),__Valido
___fun ( write; single _diversion; uslinteger _id)


__16.Expresiones con numeros negativos

__Sin error
_var1 := - 0.2 - - 0.6,

__Con error VARIABLE SIN DECLARAR
__nodeclarada := -0.2 - 0.6,
___a := -0.2 - 0..6