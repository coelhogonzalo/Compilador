__1.Declaracion de una variable de cada tipo

__Sin error
uslinteger _varuslinteger,
single _varsingle,

__Con error
__uslinteger varuslinteger,
__single id,


print('Fin del ejemplo 1'),
__2.Declaracion de una lista de variables

__Sin error
uslinteger _var1;_var2;_var3,
single _single1;_single2;_single3,

__Con error (REDECLARACION DE VARIABLES)
__uslinteger _var4;_var2;_var4,
__single _var2;_single4;_single5,



print('Fin del ejemplo 2'),
__3.Sentencia de salida de mensajes por pantalla

__Sin error
print ( 'Esta cadena es de 1 renglon' ),
print ( _var1 ),
print ( 'esta cadena es de-
mas de un renglon'),


__Con error
__print ( 'esto esta mal' ,
__print  'esto tambien' ),
__print ( ' y esto tambien' )
__print ('cadenita')

print('Fin del ejemplo 3'),
__4.Sentencia IF sin bloque ELSE con una sola sentencia.

__Sin error
if (0.2=0.2) 
	print ( ' Entre al if del ejemplo 4 ' ),
endif
if (0.2=0.3) 
	print ( 'Nunca entro aca' ),
endif
__Con error
__if ( 0.2 < 0.3 )
__endif

__if (0.2 < 0.4
__	print ( ' probando ' ),
__endif

__if 0.2 < 0.4)
__	print ( ' probando ' ),
__endif


print('Fin del ejemplo 4'),
__5.Sentencia IF sin bloque ELSE con un bloque de sentencias

__Sin error
if ( _var1 = _var2 ){
	print ( ' Entre al if del ejemplo 5' ),
	print ( ' Entre porque _var1 y _var2 son iguales' ),
}
endif

print('Fin del ejemplo 5'),
__6.Sentencia IF con bloque ELSE

__Sin error
if ( 0.2 > 0.3 ) 
	print ('Nunca entro a este if del ejemplo 6'),
else
	print ('Entre al else del ejemplo 6 obviamente'), 
endif

__Con error
__if ( 0.2 < 0.3 )
__else
__endif,

__if ( 0.2 < 0.3 )
__	print ( ' probando ' ),
__else
__endif

__if ( 0.2 < 0.3 )
__else
__	print ( ' probando ' ),
__endif


print('Fin del ejemplo 6'),
__7.Sentencia IF con comparacion entre expresiones aritmeticas como condicion, con bloque ELSE

__Sin error
if ( 0.2+5.2 < 0.3-3.2 ) 
	print ( ' Nunca entro a este if del ejemplo 7' ),
else
	print ( ' Entro al else del ejemplo 7 obviamente' ),
endif

__Con error
__if ( 0.2+5.2 < 0.3-3.2 )
__else
__endif

__if ()
__	print ( ' dale que funcionas' ),
__else
__	print ( ' probando' ),
__endif


print('Fin del ejemplo 7'),
__8.Sentencia de control asignada como tema particular

__Sin error
while ( 0.6 < 0.5 )
	print ( 'Nunca itero por aca' ),
	
uslinteger _condicion,
_condicion:= 0_ul,
while (_condicion < 3_ul){
	_condicion :=  _condicion+1_ul,
	print(_condicion),
	print('La condicion del while se cumplio ITERACION ver consola'),
}
print('La condicion del while se dejo de cumplir'),
__Con error
__while ( 0.2+5.2 < 0.3-3.2 
__	print ( ' dale que funcionas' ),
	
__while 0.2+5.2 < 0.3-3.2 )
__	print ( ' dale que funcionas' ),
	
__while()
__	print ( ' dale que funcionas' ),

print('Fin del ejemplo 8'),
__9.Sentencia de control asignada con IF anidado

__Sin error
while ( 5.2 < 0.3  )
	if ( 5.2  < 0.3  )
		print ( ' No voy a printear esto ' ),
	endif


__Con error
__while ( 0.2+5.2 < 0.3-3.2 
__	if ( 0.2+5.2 < 0.3-3.2 
__		print ( ' dale que funcionas ' ),
__	endif


print('Fin del ejemplo 9'),
__14. Declaracion de funciones con lista de permisos (si corresponde) con sentencias de control dentro.

__Sin error

single _funWRITE ( single _param1) {
	if(0.2 < 0.3)
		print ( ' dale que funcionas' ),
	endif
	_param1 := 0.2,
	return ( 2.0 )
}
single _funWRITEPASS ( single _param2) {
	if(0.2 < 0.3)
		print ( ' dale que funcionas' ),
	endif
	_param2 := _funWRITE(_param2; write ),,
	return ( 2.0 )
}

__Con error UTILIZACION DE VARIABLE LOCAL A FUNCION FUERA DE SU AMBITO
__single _testAmbito ( single _paramTest) {
__	single _declaradaenfuncion,
__	print ( ' dale que funcionas' ),
__	return ( 2.0 )
__}
__declaradaenfuncion := 0.2,

print('Fin del ejemplo 14'),
__15. Llamado de funciones como sentencia ejecutable.

__Sin error
single _diversion,
single _funWRITE2 ( single _param15) {
	if(0.2 < 0.3)
		print ( ' Entre al if dentro de funWRITE2 en el ejemplo 15' ),
	endif
	_param15 := 0.2,
	return ( 2.0 )
}
single _varsingle2,
_varsingle2 := _funWRITE2 (_diversion; write ),,

__Con error

__varsingle2 := _funWRITE (_diversion; readonly ),,   __invalido
__varsingle2 := _funWRITE (_diversion; pass ),,  __invalido
__varsingle2 := _funWRITE (_diversion; write ),,   __Valido
__varsingle2 := _funWRITE (_diversion; write;pass ),,   __Valido
__varsingle2 := _funWRITEPASS (_diversion; readonly ),,   __invalido
__varsingle2 := _funWRITEPASS (_diversion; pass ),,   __invalido
__varsingle2 := _funWRITEPASS (_diversion; write ),,   __invalido
__varsingle2 := _funWRITEPASS (_diversion; write;pass ),,   __Valido


print('Fin del ejemplo 15'),
__El ejemplo 16 lo pongo al final asi no frena la ejecucion
__ Codigos de algunas correcciones
__1
uslinteger _aC1;_var1C1;_cC1,
single _bC1;_var2C1;_dC1,
 
print('Hola'),
 
_var1C1 := 20_ul,
_aC1 := 3_ul,
_cC1 := _var1C1 + _aC1,
print(_cC1),
 
_bC1 := 2.0,
 
uslinteger _funWRITEBC1 ( uslinteger _param1C1) {
   	print('_funWRITEBC1'),
                _aC1 := 16_ul,
            	uslinteger _xC1,
            	_xC1 := 3_ul,
    			_param1C1 := 4_ul,
                return ( _xC1 * 2_ul)
}
 
uslinteger _funWRITEAC1 ( uslinteger _param2C1) {
   	print('_funWRITEAC1'),
            	_param2C1:= _funWRITEBC1(_param2C1; write),,
                print(_aC1),
            	_aC1 := 14_ul,
          		_param2C1 := 9_ul,
            	return (_param2C1 * 2_ul)
}
 
_var1C1 := _funWRITEAC1 (_aC1; write;pass ),,
print(_var1C1),
print(_aC1),

print('Fin de codigo de correccion 1'),
__2
uslinteger _aC2;_var1C2;_cC2,
single _bC2;_var2C2;_dC2,
 
print('Hola soy la Correccion2'),
 
_var1C2 := 20_ul,
_aC2 := 2_ul,
_cC2 := _var1C2 + _aC2,
print(_cC2),
 
_bC2 := 2.0,
 
uslinteger _funWRITEBC2 ( uslinteger _param1C2) {
   	print('_funWRITEBC2'),
    	_param1C2 := 2_ul,
    	return ( 2_ul * 3_ul)
}
 
uslinteger _funWRITEAC2 ( uslinteger _param2C2) {
   	print('_funWRITEAC2'),
    	_param2C2 := _funWRITEBC2(_param2C2; write),,
    	return ( 2_ul * _param2C2)
}
 
_var1C2 := _funWRITEAC2 (_aC2; write;pass ),,
print(_var1C2),
print('Fin de la Correccion 2'),

__3 (ifs consecutivos y anidados)
uslinteger _correccion3,
_correccion3:=222_ul,
if(_correccion3 = 222_ul)
	print('IF1 obviamente'),
else
	print('ELSE1'),
endif
if(_correccion3 = 222_ul)
	print('IF2 obviamente'),
else
print('ELSE2'),
endif
if(_correccion3 = 222_ul)
	if(_correccion3 != 222_ul)
		print('IF3ANIDADO '),
	else
		print('ELSE3ANIDADO obviamente'),
	endif
else
	print('ELSE4'),
endif
print('fin de la correccion 3'),
__16.Expresiones con numeros negativos

__Sin error
single _varsingle3,
_varsingle3 := - 0.2 - -0.6,

__Con error VARIABLE SIN DECLARAR

__ _nodeclarada := -0.2 - 0.6,


__ERRORES EN EJECUCION

single _unavar1,
single _unavar2,
single _unavar3,

_unavar1 := 0.0,
_unavar2 := 34.0,
_unavar3 := _unavar2 / _unavar1,

single _unavar4,
single _unavar5,
single _unavar6,

_unavar4:= 3.40282347F38,      __rango maximo de float
_unavar5:= 5.0,
_unavar6 := _unavar4 * _unavar5, __overflow

_unavar5:= 5.0 * -1.0,
_unavar6 := _unavar4 * _unavar5, __overflow negativo

uslinteger _lin1,
uslinteger _lin2,
uslinteger _lin3,

_lin1 := 0,
_lin2 := 34,
_lin3 := _lin2 / _lin1, __Division por 0

uslinteger _lin4,
uslinteger _lin5,
uslinteger _lin6,

_lin4:= 4294967295_ul, __acaponele el rango maximo de int
_lin5:= 5_ul,
_lin6 := _lin5 * _lin4,


uslinteger _lin7,
uslinteger _lin8,
uslinteger _lin9,

_lin7 := 56,
_lin8 := 34,
_lin9 := _lin8 - _lin7, __Resultado negativo

print('Fin del ejemplo 16 y fin del programa'),
